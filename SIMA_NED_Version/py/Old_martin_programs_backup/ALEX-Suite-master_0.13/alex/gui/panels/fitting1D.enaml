# from enaml.widgets.text_editor import TextEditor
from enaml.widgets.api import *
from enaml.layout.api import *
# from enaml.core.api import Looper, Conditional
# from enaml.stdlib.fields import FloatField, IntField
# from toolbar import ProcessingToolBar
# from processing import Plot
from alex.functions import Guess1D
from alex.fit import Fit
from ..popups.fitting1D import GuessParamsPopUp
        
enamldef GuessItem(ListItem): guess_params:
    # A Pythonic Guess object
    attr guess: Guess1D
    
    selectable = True
    selected = False
#     text << unicode(guess)
#     text << u'E: {}\nS: {}'.format(guess.type_E, guess.type_S)
    text << u'{}'.format(guess.function_type)#.name
    editable = False
    tool_tip << text
    checkable = True
    checked = True
    double_clicked :: 
        print guess_params.guess
        GuessParamsPopUp(guess_params, guess = guess_params.guess, title = 'Edit Guess')
    clicked :: guess_params.selected = not guess_params.selected
    
enamldef Guess1DPanel(Container): guess_listing:
    # List of pythonic guess instances
    attr guesses : list
    # Events to perform the described items
    event add_guess
    event delete
    constraints = [hbox(add, delete),
                   align('v_center', add, delete),
                   vbox(add, list_ctrl),
                   add.width == delete.width,]
    PushButton: add:
        text << 'Add'
        clicked :: guess_listing.add_guess()
    PushButton: delete:
        text << 'Delete'
        clicked :: 
            guess_listing.delete()
    ListControl: list_ctrl:
        item_spacing = 5
        Include: include:
            objects << [GuessItem(include, guess = guess) for guess in guess_listing.guesses]

    add_guess ::
        guess = Guess1D()
        print guess
        guess_listing.guesses.append(guess)
        include.objects[-1].double_clicked()
    delete ::
        # Update the guesses list to reflect this deletion
        del guess_listing.guesses[:] # Empty the list and then revil it. Must not replace it with a new list instance!
        for item in include.objects:
            if not item.selected: # This is the item to be removed
                guess_listing.guesses.append(item)
        # guess_listing.guesses = [item.guess for item in include.objects if not item.selected]

enamldef FitItem(ListItem): item:
    attr fit# : Fit
    attr prefix
    # text << u'{}'.format(item.fit.Func.name) if item.fit else u'None'
    text << u'{}{}'.format(item.prefix, item.fit)
    editable = False
    tool_tip << text
    checkable = False
    double_clicked :: 
        # FitPopUp(item, fit = item.fit, title = 'Fit Report') #fit = item.fit?
        pass
     
enamldef Fit1DPanel(Container): fit_listing:
    attr fitting
    Container:
        PushButton:
            text << 'Run Fitting'
            clicked ::
                fit_listing.fitting.run_fitting = True
                print 'clicked run fitting'
                
        ListControl: fit_list:
            # FitItem:
                # fit << fitting.fit
            Include: include:
                objects << [FitItem(fit_list, fit = fit, prefix = prefix) for fit, prefix in zip(fit_listing.fitting.fits, [u'Fit: ',])]
#                 objects << [FitListing(fit_list, fit = fit, prefix = prefix) for fit, prefix in zip(fit_listing.processing.fits, ['E: ', 'S: '])]